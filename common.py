import streamlit as st
import cx_Oracle

def get_db_connection():
    dsn = cx_Oracle.makedsn("localhost", 1521, service_name="freepdb1")
    conn = cx_Oracle.connect(user="user1", password="yoominchoi1234A", dsn=dsn)
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            name VARCHAR2(100) NOT NULL,
            user_type CHAR(1) CHECK (user_type IN ('G', 'A')) NOT NULL,
            is_safe CHAR(1) CHECK (is_safe IN ('Y', 'N')) NOT NULL,
            is_urgent CHAR(1) CHECK (is_urgent IN ('Y', 'N')) NOT NULL
        )
    """)
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS incident (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_by NUMBER REFERENCES users(id),
            shooter_location VARCHAR2(255),
            alert_msg VARCHAR2(100)
        )
    """)
    
    # cursor.execute("""
    #     CREATE TABLE IF NOT EXISTS people_status (
    #         incident_id NUMBER PRIMARY KEY REFERENCES incident(id),
    #         safe_count NUMBER DEFAULT 0,
    #         unsafe_count NUMBER DEFAULT 0,
    #         witness_info_list CLOB,
    #         urgent_list CLOB
    #     )
    # """)
    
    conn.commit()
    cursor.close()
    conn.close()

def fetch_users():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id, name, user_type FROM users")
    rows = cursor.fetchall()
    cursor.close()
    conn.close()

    return rows

def update_incident(user_id, column, value):
    conn = get_db_connection()
    cursor = conn.cursor()
    if value != '' and value != None and value != '<NA>':
        if column == "shooter_location":
            cursor.execute("""
                INSERT INTO incident (updated_by, shooter_location) 
                VALUES (:user_id, :value)
            """, {'user_id': user_id, 'value': value})
        elif column == "alert_msg":
            cursor.execute("""
                INSERT INTO incident (updated_by, alert_msg)
                VALUES (:user_id, :value)
            """, {'user_id': user_id, 'value': value})
        else:
            query = f"""
                UPDATE incident 
                SET {column} = :value, updated_by = :user_id, timestamp = SYSTIMESTAMP
                WHERE id = (SELECT id FROM incident WHERE rownum = 1 ORDER BY timestamp DESC)
            """
            cursor.execute(query, {'value':value, 'user_id':user_id})
    conn.commit()
    cursor.close()
    conn.close()
    if value != '' and value != None and value != '<NA>':
        st.rerun()

def fetch_incidents():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT i.timestamp, u.name as updated_by, i.shooter_location, i.alert_msg 
        FROM incident i 
        LEFT JOIN users u ON i.updated_by = u.id 
        ORDER BY i.timestamp DESC
    """)
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    
    return rows

