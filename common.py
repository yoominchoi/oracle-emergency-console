import cx_Oracle
from datetime import datetime
import time

def init_db():
    dsn = cx_Oracle.makedsn("localhost", 1521, service_name="freepdb1")
    # connection = cx_Oracle.connect(user="myuser", password="yoominchoi1234A", dsn=dsn)
    connection = cx_Oracle.connect(user="system", password="yoominchoi1234A", dsn=dsn)
    return connection

# table exist?
def ensure_table_exists(connection):
    with connection.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS INCIDENT_UPDATES (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                location VARCHAR2(255),
                timestamp TIMESTAMP,
                updated_by VARCHAR2(50),
                note VARCHAR2(500),
                PRIMARY KEY (id)
            )
        """)
    connection.commit()

# def update_user_status(connection, user_id, status, maybe_user):
#     with connection.cursor() as cursor:
#         cursor.execute("""
#             UPDATE users SET status = :status, maybe_user = :maybe_user WHERE id = :user_id
#         """, [status, maybe_user, user_id])
#     connection.commit()

# def update_people_status(connection, safe_user_count, unsafe_user_count, witness_users_count):
#     with connection.cursor() as cursor:
#         cursor.execute("""
#             UPDATE people_status SET safe_user_count = :safe_user_count, unsafe_user_count = :unsafe_user_count, witness_users_count = :witness_users_count WHERE id = 1
#         """, [safe_user_count, unsafe_user_count, witness_users_count])
#     connection.commit()

# def fetch_people_status(connection):
#     with connection.cursor() as cursor:
#         cursor.execute("SELECT safe_user_count, unsafe_user_count, witness_users_count FROM people_status WHERE id = 1")
#         row = cursor.fetchone()
#     return {"safe_user_count": row[0], "unsafe_user_count": row[1], "witness_users_count": row[2]} if row else None

#Function to update the incident
def update_incident(connection, location, user, note):
    with connection.cursor() as cursor:
        cursor.execute("""
            INSERT INTO INCIDENT_UPDATES (location, timestamp, updated_by, note)
            VALUES (:location, :timestamp, :updated_by, :note)
        """, location=location, timestamp=datetime.now(), updated_by=user, note=note)
    connection.commit()

def fetch_incidents(connection):
    with connection.cursor() as cursor:
        cursor.execute("SELECT location, timestamp, updated_by FROM INCIDENT_UPDATES ORDER BY timestamp DESC")
        rows = cursor.fetchall()
    return [{"location": row[0], "timestamp": row[1].strftime("%Y-%m-%d %H:%M:%S"), "updated_by": row[2]} for row in rows]

def fetch_latest_note(connection):
    with connection.cursor() as cursor:
        cursor.execute("SELECT note from INCIDENT_UPDATES WHERE note IS NOT NULL ORDER BY timestamp DESC FETCH FIRST 1 ROW ONLY")
        row = cursor.fetchone()
    return row[0] if row else None

def reconnect():
    print("Reconnecting to the database...")
    time.sleep(5)  # Wait for a few seconds before reconnecting
    return init_db()
