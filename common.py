import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
import cx_Oracle

def get_db_connection():
    dsn = cx_Oracle.makedsn("localhost", 1521, service_name="freepdb1")
    conn = cx_Oracle.connect(user="user1", password="yoominchoi1234A", dsn=dsn)
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            name VARCHAR2(100) NOT NULL,
            user_type CHAR(1) CHECK (user_type IN ('G', 'A')) NOT NULL,
            is_safe CHAR(1) CHECK (is_safe IN ('Y', 'N')),
            is_urgent CHAR(1) CHECK (is_urgent IN ('Y', 'N'))
        )
    """)
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS incident_details (
            incident_id NUMBER PRIMARY KEY REFERENCES incidents(id),
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
            updated_by NUMBER REFERENCES users(id),
            shooter_location VARCHAR2(255),
            shooter_desc VARCHAR2(255),
            alert_msg VARCHAR2(100)
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS incidents (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
        )
    """)
    
    # cursor.execute("""
    #     CREATE TABLE IF NOT EXISTS people_status (
    #         incident_id NUMBER PRIMARY KEY REFERENCES incidents(id),
    #         safe_count NUMBER DEFAULT 0,
    #         unsafe_count NUMBER DEFAULT 0,
    #         urgent_list CLOB
    #     )
    # """)
    
    conn.commit()
    # cursor.close()
    # conn.close()

def fetch_users():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id, name, user_type FROM users")
    rows = cursor.fetchall()
    cursor.close()
    conn.close()

    return rows

def fetch_incidents():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT i.timestamp, u.name as updated_by, i.shooter_location, i.alert_msg 
        FROM incident_details i 
        LEFT JOIN users u ON i.updated_by = u.id 
        ORDER BY i.timestamp DESC
    """)
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    
    return rows

def update_user(user_id, column, value):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    if value in ['Y', 'N']:
        valid_columns = ['is_safe', 'is_urgent']
        if column not in valid_columns:
            raise ValueError("Invalid column name.")
        query = f"""
            UPDATE users
            SET {column} = :value
            WHERE id = :user_id
        """
        cursor.execute(query, {'value': value, 'user_id': user_id})

    get_people_status()

    conn.commit()
    cursor.close()
    conn.close()

def get_user_status(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT is_safe, is_urgent FROM users WHERE id = :user_id", {'user_id': user_id})
    result = cursor.fetchone()
    conn.close()
    return result
    

def get_people_status():
    conn = get_db_connection()
    cursor = conn.cursor()
    # # Total # of users
    # cursor.execute("SELECT COUNT(*) FROM users u WHERE u.user_type = 'G'")
    # total_users = cursor.fetchone()

    # Total # of safe users
    cursor.execute("""
        SELECT COUNT(*)
        FROM users u
        WHERE u.user_type = 'G' and u.is_safe = 'Y'
    """)
    safe_count = cursor.fetchone()
    
    # Total # of unsafe users
    cursor.execute("""
        SELECT COUNT(*)
        FROM users u
        WHERE u.user_type = 'G' and u.is_safe = 'N'
    """)
    unsafe_count = cursor.fetchone()

    # rest of the users
    cursor.execute("""
        SELECT COUNT(*)
        FROM users u
        WHERE u.user_type = 'G' and u.is_safe is null
    """)
    rest_safe_count = cursor.fetchone()

    cursor.execute("""
        SELECT name, phone_num
        FROM users u
        WHERE u.user_type = 'G' and u.is_urgent = 'Y'
    """)
    result = cursor.fetchall()

    result = [safe_count[0], unsafe_count[0], rest_safe_count[0], result]
    return result

def get_safe_status_pie_chart(df):
    fig, ax = plt.subplots(figsize=(1,1), facecolor='none')
    colors = ['green','red','gray']
    wedges, _ = ax.pie(df['# of people'],colors=colors, radius=0.5, labels=['']*len(df))

    ax.axis('equal')

    legend_labels = [f'{cat}: {val}' for cat, val in zip(df['Category'], df['# of people'])]
    legend = ax.legend(wedges, legend_labels, title="People Safety Status", loc="center left", bbox_to_anchor=(1,0,0.5,1))

    for text in legend.get_texts():
        text.set_fontsize('small')
        text.set_color('white')

    legend.get_frame().set_facecolor('grey')

    st.pyplot(fig)


def update_incident(incident_id, user_id, column, value):
    conn = get_db_connection()
    cursor = conn.cursor()
    if value != '' and value != None and value != '<NA>':
        if column == "shooter_location" or column == 'alert_msg' or column == 'shooter_desc':
            query = f"""
                INSERT INTO incident_details (incident_id, updated_by, {column}) 
                VALUES (:incident_id, :user_id, :value)
            """
            cursor.execute(query, {'incident_id':incident_id, 'value':value, 'user_id':user_id})
        # elif column == "alert_msg":
        #     cursor.execute("""
        #         INSERT INTO incident_details (incident_id, updated_by, alert_msg)
        #         VALUES (:incident_id, :user_id, :value)
        #     """, {'incident_id': incident_id, 'user_id': user_id, 'value': value})
        else:
            query = f"""
                UPDATE incident_details 
                SET {column} = :value, updated_by = :user_id, timestamp = SYSTIMESTAMP
                WHERE id = (SELECT id FROM incident_details WHERE rownum = 1 ORDER BY timestamp DESC)
            """
            cursor.execute(query, {'value':value, 'user_id':user_id})
    conn.commit()
    # cursor.close()
    # conn.close()
    if value != '' and value != None and value != '<NA>':
        st.rerun()

############# AI ########## (shooter description)
def fetch_shooter_desc():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT shooter_desc from incident_details i WHERE i.shooter_desc is not null")
    rows = cursor.fetchall()
    cursor.close()
    print('djkskkldfkldkldklds', [row[0] for row in rows])
    return [row[0] for row in rows]

def save_to_txt(data, file_path):
    with open(file_path, 'w') as file:
        for line in data:
            file.write(f"{line}\n")

def download_shooter_txt(data):
    if data:
        file_path = 'shooter_desc.txt'

        save_to_txt(data, file_path)
        st.write(f"Data saved to {file_path}")

        # Provide the downloading link
        with open(file_path, 'r') as file:
            st.download_button('Download Text File', file, file_name=file_path)

    else:
        st.write("No data available")

conn = get_db_connection()
cursor = conn.cursor()
cursor.close()
conn.close()