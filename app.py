import streamlit as st
import cx_Oracle
from datetime import datetime

# database connection
def init_db():
    dsn = cx_Oracle.makedsn("localhost", 1521, service_name="freepdb1")
    connection = cx_Oracle.connect(user="sys", password="yoominchoi1234A", dsn=dsn, mode=cx_Oracle.SYSDBA)
    return connection

# def testing(connection):
#     cursor = connection.cursor()
#     cursor.execute("SELECT * FROM INCIDENT_UPDATES")
#     rows = cursor.fetchall()

#     for row in rows:
#         print(row)
#     cursor.close()
#     connection.close()

# connection = init_db()
# testing(connection)

# table exist?
def ensure_table_exists(connection):
    with connection.cursor() as cursor:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS INCIDENT_UPDATES (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                location VARCHAR2(255),
                timestamp TIMESTAMP,
                updated_by VARCHAR2(50),
                PRIMARY KEY (id)
            )
        """)
    connection.commit()

# dummy data (initially reported data)
incident_updates = [
    {
        "location": "500 Oracle Pathway Building 200 Floor 3",
        "timestamp": "2024-06-30 08:40:37",
        # "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "updated_by": "John Smith"
    }
]

#Function to update the incident
def update_incident(connection, location, user):
    with connection.cursor() as cursor:
        cursor.execute("""
            INSERT INTO INCIDENT_UPDATES (location, timestamp, updated_by)
            VALUES (:location, :timestamp, :updated_by)
        """, [location, datetime.now(), user])
    connection.commit()

# Function to fetch incident data
def fetch_incidents(connection):
    with connection.cursor() as cursor:
        cursor.execute("SELECT location, timestamp, updated_by FROM INCIDENT_UPDATES ORDER BY timestamp DESC")
        rows = cursor.fetchall()
    return [{"location": row[0], "timestamp": row[1].strftime("%Y-%m-%d %H:%M:%S"), "updated_by": row[2]} for row in rows]

# Initialize database and ensure table exists
connection = init_db()
ensure_table_exists(connection)

#Streamlit UI
st.title("Oracle Emergency Control App")

#Login as a user
user = st.sidebar.selectbox("Select User", ["John Smith", "Sarah Kim", "Katrina Wilson Admin"])

st.subheader("Shooter Location Updates")
incident_updates = fetch_incidents(connection)

if user == "Katrina Wilson Admin":
    # st.header("Admin User Page")
    display_data = [
        {
            "location": update["location"],
            "timestamp": update["timestamp"],
            "updated_by": update["updated_by"]
        } for update in incident_updates
    ]

else:
     display_data = [
        {
            "location": update["location"],
            "timestamp": update["timestamp"]
        } for update in incident_updates
    ]
st.table(display_data)

if user != "Katrina Wilson Admin":
    location = st.text_input("Enter Shooter Location (Building and Floor)")
    if st.button("Update Location"):
        update_incident(connection, location, user)
        st.success("Location updated successfully.")
        # Refresh the incident updates
        incident_updates = fetch_incidents(connection)
        if user == "Katrina Wilson Admin":
            display_data = [
                {
                    "location": update["location"],
                    "timestamp": update["timestamp"],
                    "updated_by": update["updated_by"]
                } for update in incident_updates
            ]
        else:
            display_data = [
                {
                    "location": update["location"],
                    "timestamp": update["timestamp"]
                } for update in incident_updates
            ]
        st.table(display_data)
connection.close()